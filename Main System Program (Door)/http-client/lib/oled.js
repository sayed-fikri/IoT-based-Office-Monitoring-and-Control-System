var i2c = require('i2c-bus');
var i2cBus = i2c.openSync(1);

var OledSH1106 = function() {
  this.HEIGHT = 64;
  this.WIDTH = 128;
  this.ADDRESS = 0x3C;
  this.PROTOCOL = 'I2C';

  // create command buffers
  this.DISPLAY_OFF = 0xAE;
  this.DISPLAY_ON = 0xAF;
  this.SET_DISPLAY_CLOCK_DIV = 0xD5;
  this.SET_MULTIPLEX = 0xA8;
  this.SET_DISPLAY_OFFSET = 0xD3;
  this.SET_START_LINE = 0x00;
  this.CHARGE_PUMP = 0x8D;
  this.EXTERNAL_VCC = false;
  this.MEMORY_MODE = 0x20;
  this.SEG_REMAP = 0xA1; // using 0xA0 will flip screen
  this.COM_SCAN_DEC = 0xC8;
  this.COM_SCAN_INC = 0xC0;

  this.SET_COM_PINS = 0xDA;
  this.SET_CONTRAST = 0x81;
  this.SET_PRECHARGE = 0xd9;
  this.SET_VCOM_DETECT = 0xDB;

  this.DISPLAY_ALL_ON_RESUME = 0xA4;
  this.NORMAL_DISPLAY = 0xA6;

  this.COLUMN_ADDR = 0x21;
  this.PAGE_ADDR = 0xB0;

  this.INVERT_DISPLAY = 0xA7;
  this.ACTIVATE_SCROLL = 0x2F;
  this.DEACTIVATE_SCROLL = 0x2E;
  this.SET_VERTICAL_SCROLL_AREA = 0xA3;
  this.RIGHT_HORIZONTAL_SCROLL = 0x26;
  this.LEFT_HORIZONTAL_SCROLL = 0x27;
  this.VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;
  this.VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A;

  this.cursor_x = 0;
  this.cursor_y = 0;

  // new blank buffer
  //For version <6.0.0
  if(typeof Buffer.alloc == "undefined") {
    this.buffer = new Buffer((this.WIDTH * this.HEIGHT) / 8);
  }
  //For version >=6.0.0
  else {
    this.buffer = Buffer.alloc((this.WIDTH * this.HEIGHT) / 8);
  }
  	this.buffer.fill(0x00);
  	this.dispBuffAtPage = [];
	this.dispBuff = [
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x20,0x40,0x10,0x28,0x18,0x0c,0x08,
		0x0c,0x08,0x04,0x06,0x00,0x0e,0x06,0x04,0x0c,0x00,0x0c,0x10,0x10,0x38,0x30,0x10,
		0xc0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,
		0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x78,0x38,0x30,0x00,0x00,0x00,0x38,0x38,0x78,
		0xf8,0xf8,0xf8,0xf8,0xf8,0x78,0x38,0x38,0x00,0xf8,0xf8,0xf8,0xf8,0xf8,0x78,0x38,
		0x38,0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0x38,0x38,0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0x00,
		0x30,0x38,0x78,0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xc0,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0xf0,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x78,0x38,0x38,0x00,
		0x00,0x00,0xa0,0xb0,0x4c,0x1a,0x07,0x03,0x00,0x00,0x00,0x00,0x11,0x3f,0x3f,0xbf,
		0xbf,0xbf,0xff,0xff,0x3f,0x3f,0xff,0xff,0xbf,0xbf,0xbf,0x3f,0x3f,0x1f,0x00,0x00,
		0x00,0x01,0x03,0x05,0x1e,0xa8,0xe0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x0f,0x0f,0x0f,0x03,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x01,0x0f,0x0f,0x0f,0x00,
		0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x1f,0x7f,0xff,0xff,0xfe,0xf0,0x80,0x00,0x00,
		0x00,0x00,0xc0,0xf8,0xff,0x7f,0x1f,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
		0x00,0xb4,0xb6,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xf0,0xfc,0x7e,0x1f,0xff,
		0xff,0x3f,0x0f,0x0f,0x00,0x00,0x0f,0x0f,0x3f,0xff,0xff,0xcf,0x3e,0xfc,0xf0,0x80,
		0x00,0x00,0x00,0x00,0x00,0x00,0x83,0xb7,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x07,0x3f,0xff,0xff,0xff,0xfc,0xe0,
		0xf0,0xfe,0x7f,0x0f,0x03,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
		0x00,0x01,0x0e,0x2e,0xb0,0xc0,0x00,0x00,0x00,0x00,0x07,0x3f,0x7f,0xf8,0xe0,0xc7,
		0x8f,0x1f,0x1c,0x1c,0x38,0x38,0x1c,0x1c,0x1f,0x8f,0xc7,0xe0,0xf8,0x7f,0x3f,0x07,
		0x00,0x00,0x00,0x00,0x40,0xd8,0x2e,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x03,0x0f,0x3f,0x7f,0x7f,0xff,0xf8,0xf0,0xe0,0xe0,0xe0,0xe0,0xe0,0xf0,0xf8,
		0x7e,0x3f,0x1f,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0,
		0xe0,0xf7,0xff,0xff,0xff,0xff,0xff,0xe0,0xe0,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,
		0xe0,0xe0,0xe0,0xf0,0xff,0xff,0xff,0xf8,0xe0,0xe0,0xe0,0x01,0x0f,0x7f,0xff,0xff,
		0x1f,0x03,0x00,0xe0,0xe0,0xe0,0xf7,0xff,0xff,0xff,0xff,0xff,0xe0,0xe0,0xe0,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0f,0x1e,0x08,0x18,0x30,0x00,0x60,0xa1,0xc3,
		0x47,0x87,0x07,0x87,0x8e,0x8e,0x06,0x87,0x07,0x87,0x43,0xc1,0x20,0x40,0x20,0x08,
		0x1c,0x0a,0x06,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x40,
		0x78,0x00,0x18,0x70,0x00,0x78,0x18,0x70,0x09,0x79,0x55,0x41,0x79,0x14,0x78,0x08,
		0x54,0x68,0x78,0x00,0x7c,0x04,0x78,0x00,0x00,0x00,0x04,0x7c,0x00,0x78,0x54,0x40,
		0x78,0x38,0x40,0x78,0x10,0x78,0x10,0x4c,0x4c,0x30,0x78,0x40,0x00,0x68,0x44,0x38,
		0x38,0x44,0x78,0x00,0x00,0x00,0x00,0x00,0x78,0x70,0x78,0x60,0x38,0x70,0x00,0x40,
		0x40,0x60,0x38,0x70,0x00,0x78,0x08,0x08,0x54,0x68,0x38,0x00,0x38,0x38,0x40,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
		0x01,0x01,0x00,0x01,0x01,0x01,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	];

  var config = {
    '128x32': {
      'multiplex': 0x1F,
      'compins': 0x02,
      'coloffset': 0
    },
    '128x64': {
      'multiplex': 0x3F,
      'compins': 0x12,
      'coloffset': 0
    },
    '96x16': {
      'multiplex': 0x0F,
      'compins': 0x2,
      'coloffset': 0,
    }
  };

  // Setup i2c
  this.wire = i2cBus;

  var screenSize = this.WIDTH + 'x' + this.HEIGHT;
  this.screenConfig = config[screenSize];

  //this._initialise();
}

OledSH1106.prototype.initOLED = function() {
	try
	{
		this._initialise();
		return true;
	}
	catch (e)
	{
		console.log('Error on init OLED.');
	}
	return false;
}

OledSH1106.prototype._initialise = function() {
  	// sequence of bytes to initialise with
	var initSeq = [ 0xAE,       // 0 disp off
                    0xD5,       // 1 clk div
                    0x80,       // 2 suggested ratio
                    0xA8, 0x3F, // 3 set multiplex
                    0xD3, 0x00, // 5 display offset
                    0x40,       // 7 start line
                    0xAD, 0x8B, // 8 enable charge pump
                    0xA1,       // 10 seg remap 1, pin header at the top
                    0xC8,       // 11 comscandec, pin header at the top
                    0xDA, 0x12, // 12 set compins
                    0x81, 0x80, // 14 set contrast
                    0xD9, 0x22, // 16 set precharge
                    0xDB, 0x35, // 18 set vcom detect
                    0xA6,       // 20 display normal (non-inverted)
                    0xAF        // 21 disp on
                  ];

	this._transfer('cmd', initSeq);
}

// write command and data
OledSH1106.prototype._transfer = function(type, arrayValue, fn) {
	this._waitUntilReady(function() {
		var bufferForSend;
		if (type === 'data') {
			control = 0x40;
			arrayValue.unshift(0x40);
		  } else if (type === 'cmd') {
			arrayValue.unshift(0x00);
		  } else {
			return;
		}

	  //For version <6.0.0
	  if(typeof Buffer.from == "undefined") {
		bufferForSend = new Buffer(arrayValue);
	  }
	  //For version >=6.0.0
	  else {
		bufferForSend = Buffer.from(arrayValue)
	  }
	//console.log(bufferForSend);
	  this.wire.i2cWriteSync(this.ADDRESS, arrayValue.length, bufferForSend);
	  /*this.wire.i2cWrite(this.ADDRESS, 2, bufferForSend, function(err) {
		// Q: why fn is undefined?
		// A: because _transfer() is called with 2 arguments
		if(fn) {
		  fn();
		}
	  });*/
	}.bind(this));
}

OledSH1106.prototype.makeDisplay = function() {
	var start = 0; var ends = 0;var page = this.PAGE_ADDR;var i = 0;
	for (var p=0; p<(this.WIDTH * this.HEIGHT / 8); p+=this.WIDTH) {
		page = this.PAGE_ADDR | (i & 0x0F);
		this._transfer('cmd', [page, 0x02, 0x10]);

		start = this.WIDTH * i;
		ends = this.WIDTH * (i+1) - 1;
		var buf = this.dispBuff.slice(start,ends);
		this._transfer('data', buf);
		i++;
	}
}

// Make Display At Specific Page {0-7}
OledSH1106.prototype.makeDisplayAtPage = function(arrayValue,page) {
	// copy data to disp buffer
	for(var i=0;i<arrayValue.length;i++) this.dispBuff[(page*this.WIDTH)+i] = arrayValue[i];

	page = this.PAGE_ADDR | (page & 0x0F);
	this._transfer('cmd', [page, 0x02, 0x10]);
	this._transfer('data', arrayValue);
}

// turn oled off
OledSH1106.prototype.turnOffDisplay = function() {
  this._transfer('cmd', [this.DISPLAY_OFF]);
}

// turn oled on
OledSH1106.prototype.turnOnDisplay = function() {
  this._transfer('cmd', [this.DISPLAY_ON]);
}

// invert pixels on oled
OledSH1106.prototype.invertDisplay = function(bool) {
  if (bool) {
    this._transfer('cmd', [this.INVERT_DISPLAY]); // inverted
  } else {
    this._transfer('cmd', [this.NORMAL_DISPLAY]); // non inverted
  }
}

OledSH1106.prototype.drawLines = function(x0,x1,y0,y1) {
	if(x0 < 0 || x0 >= this.WIDTH || x1 < 0 || x1 >= this.WIDTH) return;
	if(y0 < 0 || y0 >= this.HEIGHT || y1 < 0 || y1 >= this.HEIGHT) return;

  	var dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1,
        dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1,
        err = (dx > dy ? dx : -dy) / 2;

	while (true) {
	    if (x0 === x1 && y0 === y1) break;
		var pos = this._findPositionBuf(x0,y0);
		this.dispBuff[pos] = Math.pow(2, y0%8);
    	var e2 = err;

    	if (e2 > -dx) {err -= dy; x0 += sx;}
    	if (e2 < dy) {err += dx; y0 += sy;}
  	}

  	var len_page = this.dispBuff.length/this.WIDTH;
	for (var p=0; p<len_page; p++) {
		this._transfer('cmd', [this.PAGE_ADDR | (p & 0x0F), 0x02, 0x10]);
		var buf = this.dispBuff.slice(this.WIDTH * p,this.WIDTH * (p+1) - 1);
		this._transfer('data', buf);
		//console.log(p);
	}
}

OledSH1106.prototype.clearDisplay = function() {
	var page = this.PAGE_ADDR;var i = 0;
	for (var p=0; p<(this.WIDTH * this.HEIGHT / 8); p+=this.WIDTH) {
		page = this.PAGE_ADDR | (i & 0x0F);
		this._transfer('cmd', [page, 0x02, 0x10]);

		var buf = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
		this._transfer('data', buf);
		i++;
	}
	for(var i=0; i<this.dispBuff.length;i++)
	{
		this.dispBuff[i] = 0x00;
	}
}

// draw an image pixel array on the screen
OledSH1106.prototype.drawImage = function(img) {
	var k = 0;
	for(var i=0; i<img.height/8;i++)
	{
		for(var j=0;j<img.width;j++)
		{
			var x = j;
			var y = i*8;

			var pos = this._findPositionBuf(x,y);
			this.dispBuff[pos] = img.data[k++];
		}
	}
}

OledSH1106.prototype.writeStringAtPage = function(font, size, page, string) {
	var strLen  = string.length;
	var wordArr = string.split(' ');
	var len = wordArr.length, padding = 0, letspace = 1, leading = 2;
	var ilen = 0;
	this.dispBuffAtPage = this._fillClear(size*this.WIDTH);

	for (var w = 0; w < len; w += 1) {
    	wordArr[w] += ' ';
    	var stringArr = wordArr[w].split(''),
        slen = stringArr.length,
        compare = (font.width * size * slen) + (size * (len -1));

		for (var i = 0; i < slen; i += 1) {
			var charBuf = this._findCharBuf(font, stringArr[i]);
			var pos = 0;
			for (var j = 0; j < charBuf.length; j += 1) {
				if(size === 1)
				{
					pos = this._findPositionBuf(this.cursor_x + ilen,0);
					this.dispBuffAtPage[pos] = charBuf[j];
					ilen++;
				}
				else
				{
					if(charBuf[j] == ' ')
					{
						pos = this._findPositionBuf(this.cursor_x + ilen + 128,8);
						//for(var l=0;l<size;l++)
						{
							this.dispBuffAtPage[pos] = charBuf[j];
							this.dispBuffAtPage[pos++] = charBuf[j];
							ilen;
						}
					}
					else
					{
						var vdata = this._getCharMulti(font, charBuf[j], size);
						//console.log(vdata);
						for(var k=0;k<size;k++)
						{
							for(var l=0;l<size;l++)
							{
								pos = this._findPositionBuf(this.cursor_x + ilen,l*8);

								this.dispBuffAtPage[pos] = vdata[l];
							}
							ilen++;
						}
					}
				}
			}
			this.dispBuffAtPage[pos+1] = 0x00;
			ilen++;
		}
	}

	for(var i=0;i<size;i++)
	{
		if((page+i)>7) break;
		start = this.WIDTH * i;
		ends = this.WIDTH * (i+1) - 1;
		var buff = this.dispBuffAtPage.slice(start,ends);
		this.makeDisplayAtPage(buff,page+i);
	}
}

OledSH1106.prototype.writeString = function(font, size, string) {
	var strLen  = string.length;
	var wordArr = string.split(' ');
	var len = wordArr.length, padding = 0, letspace = 1, leading = 2;
	var ilen = 0;

	for (var w = 0; w < len; w += 1) {
    	// put the word space back in
    	wordArr[w] += ' ';
    	var stringArr = wordArr[w].split(''),
        slen = stringArr.length,
        compare = (font.width * size * slen) + (size * (len -1));

		// loop through the array of each char to draw
		for (var i = 0; i < slen; i += 1) {
			// look up the position of the char, pull out the buffer slice
			var charBuf = this._findCharBuf(font, stringArr[i]);
			var pos = 0;
			//console.log(charBuf);
			for (var j = 0; j < charBuf.length; j += 1) {
				if(size === 1)
				{
					pos = this._findPositionBuf(this.cursor_x + ilen,this.cursor_y);
					this.dispBuff[pos] = charBuf[j];
					//console.log(this.dispBuff[ilen] + ' ' + charBuf[j]);
					ilen++;
				}
				else
				{
					if(charBuf[j] == ' ')
					{
						pos = this._findPositionBuf(this.cursor_x + ilen + k*128,this.cursor_y + k*8);
						//for(var l=0;l<size;l++)
						{
							this.dispBuff[pos] = charBuf[j];
							this.dispBuff[pos++] = charBuf[j];
							ilen;
						}
					}
					else
					{
						var vdata = this._getCharMulti(font, charBuf[j], size);
						//console.log(vdata);
						for(var k=0;k<size;k++)
						{
							for(var l=0;l<size;l++)
							{
								pos = this._findPositionBuf(this.cursor_x + ilen,this.cursor_y + l*8);
								//console.log('pos: '+pos);

								this.dispBuff[pos] = vdata[l];
								//console.log(vdata[l]);

							}
							ilen++;
						}
					}
				}
			}
			this.dispBuff[pos+1] = 0x00;
			ilen++;
		}
	}
}

// find where the character exists within the font object
OledSH1106.prototype._findCharBuf = function(font, c) {
	// use the lookup array as a ref to find where the current char bytes start
  	var cBufPos = font.lookup.indexOf(c) * font.width;
  	// slice just the current char's bytes out of the fontData array and return
  	var cBuf = font.fontData.slice(cBufPos, cBufPos + font.width);
  	return cBuf;
}

OledSH1106.prototype._getCharMulti = function(font,data, size) {
	var vb = data.toString(2);

	var cc = '';
	var buf = [];
	if(vb.length < 8)
	{
		var a = '';
		for(var i=0;i<(8-vb.length);i++)
		{
			a += '0';
		}
		vb = a+vb;
	}

	for(var i=0;i<vb.length;i++)
	{
		for(var j=0;j<size;j++ )
		{
			cc += vb[i];
		}
	}

	for(var k=0;k<size;k++)
	{
		buf[size-k-1] = parseInt(cc.substring(k*8, (k+1)*8), 2);
	}

	return buf;
}

// get character bytes from the supplied font object in order to send to framebuffer
OledSH1106.prototype._readCharBytes = function(byteArray) {
	var bitArr = [], bitCharArr = [];
  	// loop through each byte supplied for a char
  	for (var i = 0; i < byteArray.length; i += 1) {
    	// set current byte
    	var byte = byteArray[i];
    	// read each byte
    	for (var j = 0; j < 8; j += 1) {
      		// shift bits right until all are read
      		var bit = byte >> j & 1;
      		bitArr.push(bit);
    	}
    	// push to array containing flattened bit sequence
    	bitCharArr.push(bitArr);
    	// clear bits for next byte
    	bitArr = [];
  	}
  	return bitCharArr;
}

// Read the response byte to see if this is the case
OledSH1106.prototype._waitUntilReady = function(callback) {
	var done, oled = this;

	function tick(callback) {
		oled._readI2C(function(byte) {
			// read the busy byte in the response
			busy = byte >> 7 & 1;
			if (!busy) {
				// if not busy, it's ready for callback
				//console.log('not busy');
				callback();
			}
			else {
				setTimeout(tick, 0);
			}
		});
	};

	setTimeout(function () {tick(callback) }, 0);
}

// read a byte from the oled
OledSH1106.prototype._readI2C = function(fn) {
	//For version <6.0.0
	if(typeof Buffer.from == "undefined") {
		this.wire.i2cRead(this.ADDRESS, 0, new Buffer([0]), function(err, bytesRead, data) {
			// result is single byte
			if(typeof data === "object") {
				fn(data[0]);
			}
			else {
				fn(0);
			}
		});
	}
	//For version >=6.0.0
	else {
		var data=[0];
		this.wire.i2cReadSync(this.ADDRESS, 1, Buffer.from(data));
		fn(data[0]);
	}
}

OledSH1106.prototype._findPositionBuf = function(x0, y0) {
	var pos = 0;
	if(y0 < 8)
	{
		pos = x0;
	}
	else if(y0 >= 8 && y0 < 16)
	{
		pos = x0 + 128;
	}
	else if(y0 >= 16 && y0 < 24)
	{
		pos = x0 + 256;
	}
	else if(y0 >= 24 && y0 < 32)
	{
		pos = x0 + 384;
	}
	else if(y0 >= 32 && y0 < 40)
	{
		pos = x0 + 512;
	}
	else if(y0 >= 40 && y0 < 48)
	{
		pos = x0 + 640;
	}
	else if(y0 >= 48 && y0 < 56)
	{
		pos = x0 + 768;
	}
	else if(y0 >= 56 && y0 < 64)
	{
		pos = x0 + 896;
	}

	return pos;
}

// set starting position of a text string on the oled
OledSH1106.prototype.setCursor = function(x, y) {
	this.cursor_x = x;
 	this.cursor_y = y;
}

OledSH1106.prototype.setCursorX = function(x) {
	this.cursor_x = x;
}

OledSH1106.prototype.setCursorY = function(y) {
 	this.cursor_y = y;
}

OledSH1106.prototype._fillClear = function(len) {
	var buf = [];
	for(var i=0;i<len;i++) buf[i]=0x00;

	return buf;
}


module.exports = new OledSH1106();